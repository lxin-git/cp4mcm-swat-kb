{"componentChunkName":"component---src-pages-labs-high-speed-file-transfer-at-the-speed-of-business-cli-mdx","path":"/labs/high-speed-file-transfer-at-the-speed-of-business/cli/","result":{"pageContext":{"frontmatter":{"title":"Aspera CLI","description":"Think Lab 5352 - Aspera CLI","tabs":["Prerequisites","CLI","Client & CP4I","Connect & AoC","Node API","Cloud to Cloud","Distribution"]},"relativePagePath":"/labs/high-speed-file-transfer-at-the-speed-of-business/cli.mdx","titleType":"page","MdxNode":{"id":"6601ca93-2df1-5ae0-afd4-f35230259248","children":[],"parent":"2c3b01b5-1515-5ba3-9e94-62ef61cfec3a","internal":{"content":"---\ntitle: Aspera CLI\ndescription: Think Lab 5352 - Aspera CLI\ntabs:\n  [\n    'Prerequisites',\n    'CLI',\n    'Client & CP4I',\n    'Connect & AoC',\n    'Node API',\n    'Cloud to Cloud',\n    'Distribution',\n  ]\n---\n\nexport const Title = () => <span>High Speed File Transfer at the Speed of Business</span>\n\n## Aspera ascp CLI\n\nThe very first Aspera client was a command line tool called `ascp`. You will start this\nlab by using the `ascp` CLI client to download a file from the Aspera hosted Demo Server.\n\n![Aspera Native Client](./images/native-client.png)\n\n## Using the ascp CLI\n\n1. Open the Terminal app from the desktop of the 'Developer' machine and ensure you are in\n   the `/home/ibmuser` directory. You can check this by running `pwd`.\n\n1. Execute the following command to download the file named '100MB' from the Aspera Demo\n   Server:\n\n   ```bash\n   ascp -O 33001 -P 33001 -l 100M aspera@demo.asperasoft.com:/aspera-test-dir-large/100MB /home/ibmuser\n   ```\n\n   When prompted for the password enter: `demoaspera`\n\n   Note: `-O` sets the UDP port, `-P` sets the SSH port & `-l` sets the Target Rate. You\n   can read more about the available options of the CLI with `man ascp`.\n\n   The output should look like:\n\n   ![CLI Download Output](./images/cli-download.png)\n\nThe file named `100MB` has now been download to the `/home/ibmuser` directory. You can run\n`ls -lh` to see the new file.\n\n## Scripting the ascp CLI\n\nThe `ascp` CLI is a flexible option for initiating FASP transfers. The CLI can easily be\nused in new or existing scripts to improve transfer performance, security and management\ncapabilities. The CLI can replace tools like; scp, ftp, sftp, rsync and other similar tcp\nbased protocols. Lets look at a quick example of how easy it is to use `ascp` in a script:\n\n1. Export the password as an environment variable so the script can run without user\n   interaction:\n\n   ```bash\n   export ASPERA_SCP_PASS=demoaspera\n   ```\n\n   **Note:** This is not compulsory however if you do not export the password you will be\n   prompted for the password each time the script is executed. You also have the option of\n   configuring SSH Key based authentication.\n\n1. Execute the `download100MB.sh` script in the `/home/ibmuser` directory by running:\n\n   ```bash\n   /home/ibmuser/download100MB.sh\n   ```\n\n   ![CLI Download Script](./images/cli-download-script.png)\n\n   You will notice this time the file gets `skipped`. Print the script to the screen:\n\n   ```bash\n   cat /home/ibmuser/download100MB.sh\n   ```\n\n   If you look at the command being executed in the script you will notice there is an\n   additional option added; `-k 1`, this tells ascp to only re-download or resume a file\n   download if file attributes are different. In this case the file is identical so there\n   is no need to re-download. You can read more about resume-levels (`-k`) and other\n   options with `man ascp`.\n\n## Recap\n\nYou have just downloaded a file from the Aspera Demo Server using the Aspera `ascp` CLI\nclient both from the command line and in a script.\n\nDownload commands are simple when you know what file is available for download at the\nremote side. What happens when you are not familiar with the structure of the remote\nfilesystem? Next up you will look at improving the end-user experience using the native\nAspera Client GUI that addresses challenges like this.\n","type":"Mdx","contentDigest":"8a750944ee3e5d4a3c45a8383dd7124d","counter":186,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Aspera CLI","description":"Think Lab 5352 - Aspera CLI","tabs":["Prerequisites","CLI","Client & CP4I","Connect & AoC","Node API","Cloud to Cloud","Distribution"]},"exports":{},"rawBody":"---\ntitle: Aspera CLI\ndescription: Think Lab 5352 - Aspera CLI\ntabs:\n  [\n    'Prerequisites',\n    'CLI',\n    'Client & CP4I',\n    'Connect & AoC',\n    'Node API',\n    'Cloud to Cloud',\n    'Distribution',\n  ]\n---\n\nexport const Title = () => <span>High Speed File Transfer at the Speed of Business</span>\n\n## Aspera ascp CLI\n\nThe very first Aspera client was a command line tool called `ascp`. You will start this\nlab by using the `ascp` CLI client to download a file from the Aspera hosted Demo Server.\n\n![Aspera Native Client](./images/native-client.png)\n\n## Using the ascp CLI\n\n1. Open the Terminal app from the desktop of the 'Developer' machine and ensure you are in\n   the `/home/ibmuser` directory. You can check this by running `pwd`.\n\n1. Execute the following command to download the file named '100MB' from the Aspera Demo\n   Server:\n\n   ```bash\n   ascp -O 33001 -P 33001 -l 100M aspera@demo.asperasoft.com:/aspera-test-dir-large/100MB /home/ibmuser\n   ```\n\n   When prompted for the password enter: `demoaspera`\n\n   Note: `-O` sets the UDP port, `-P` sets the SSH port & `-l` sets the Target Rate. You\n   can read more about the available options of the CLI with `man ascp`.\n\n   The output should look like:\n\n   ![CLI Download Output](./images/cli-download.png)\n\nThe file named `100MB` has now been download to the `/home/ibmuser` directory. You can run\n`ls -lh` to see the new file.\n\n## Scripting the ascp CLI\n\nThe `ascp` CLI is a flexible option for initiating FASP transfers. The CLI can easily be\nused in new or existing scripts to improve transfer performance, security and management\ncapabilities. The CLI can replace tools like; scp, ftp, sftp, rsync and other similar tcp\nbased protocols. Lets look at a quick example of how easy it is to use `ascp` in a script:\n\n1. Export the password as an environment variable so the script can run without user\n   interaction:\n\n   ```bash\n   export ASPERA_SCP_PASS=demoaspera\n   ```\n\n   **Note:** This is not compulsory however if you do not export the password you will be\n   prompted for the password each time the script is executed. You also have the option of\n   configuring SSH Key based authentication.\n\n1. Execute the `download100MB.sh` script in the `/home/ibmuser` directory by running:\n\n   ```bash\n   /home/ibmuser/download100MB.sh\n   ```\n\n   ![CLI Download Script](./images/cli-download-script.png)\n\n   You will notice this time the file gets `skipped`. Print the script to the screen:\n\n   ```bash\n   cat /home/ibmuser/download100MB.sh\n   ```\n\n   If you look at the command being executed in the script you will notice there is an\n   additional option added; `-k 1`, this tells ascp to only re-download or resume a file\n   download if file attributes are different. In this case the file is identical so there\n   is no need to re-download. You can read more about resume-levels (`-k`) and other\n   options with `man ascp`.\n\n## Recap\n\nYou have just downloaded a file from the Aspera Demo Server using the Aspera `ascp` CLI\nclient both from the command line and in a script.\n\nDownload commands are simple when you know what file is available for download at the\nremote side. What happens when you are not familiar with the structure of the remote\nfilesystem? Next up you will look at improving the end-user experience using the native\nAspera Client GUI that addresses challenges like this.\n","fileAbsolutePath":"/Users/Mark/Documents/GitHub/SWAT2020v3/src/pages/labs/high-speed-file-transfer-at-the-speed-of-business/cli.mdx"}}}}